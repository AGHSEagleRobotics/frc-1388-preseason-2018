// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc1388.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.WaitCommand;

import org.usfirst.frc1388.Position;
import org.usfirst.frc1388.Objective;
import org.usfirst.frc1388.Robot;
import org.usfirst.frc1388.RobotMap;
import org.usfirst.frc1388.UsbLogging;
import org.usfirst.frc1388.subsystems.*;
import org.usfirst.frc1388.subsystems.Elevator.ElevatorSetpoint;

/**
 *
 */
public class AutonomousInternal extends CommandGroup {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
	public AutonomousInternal() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
		// Add Commands here:
		// e.g. addSequential(new Command1());
		//      addSequential(new Command2());
		// these will run in order.

		// To run multiple commands at the same time,
		// use addParallel()
		// e.g. addParallel(new Command1());
		//      addSequential(new Command2());
		// Command1 and Command2 will run in parallel.

		// A command group will require all of the subsystems that each member
		// would require.
		// e.g. if Command1 requires chassis, and Command2 requires arm,
		// a CommandGroup containing them would require both the chassis and the
		// arm.
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

		// END AUTOGENERATEE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

		Objective priority = Robot.autonObjective; // Enum equal to value set in autonSelector SendableChooser, set in autonInit
	
		double dist = 12;

		double wait_time = 3;


		addSequential( new WaitCommand(wait_time) );

		// drive dist inches
		addSequential( new AutonomousDrive(dist, false) );
		
		addSequential( new WaitCommand(wait_time) );

		// turn 90
		addSequential( new AutonomousTurnTo(90) );

		addSequential( new WaitCommand(wait_time) );

		// turn -270
		addSequential( new AutonomousTurnTo(-180) );

		addSequential( new WaitCommand(wait_time) );

		// drive dist inches
		addSequential( new AutonomousDrive(dist, false) );

		addSequential( new WaitCommand(wait_time) );

		// turn 180
		addSequential( new AutonomousTurnTo(0) );

	}
}


